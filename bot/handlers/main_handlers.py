from aiogram.fsm.context import FSMContext
# from aiogram.dispatcher import StorageKey

from aiogram.filters import ChatMemberUpdatedFilter, LEFT, StateFilter, Command, KICKED
from aiogram.types import CallbackQuery, Message, ChatMemberUpdated, ReplyKeyboardRemove, Location, ContentType
from aiogram import Router, F, Bot
from aiogram.utils.media_group import MediaGroupBuilder
from bot.keyboards.main_keyboards import *
from bot.keyboards.admin_panel_keyboards import *
from bot.middlewares.throttling_middleware import ThrottlingMiddleware
from bot.db.requests import *
from bot.misc.states import RegistrationSteps, MainStates
from bot.misc.gecoder import get_city_by_name, get_city_by_cords
# from bot.create_bot import dp
import logging
import datetime as dt
from typing import Iterator


router = Router()
router.message.middleware(ThrottlingMiddleware())


async def start_search(message: Message, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç"""
    await state.set_state(MainStates.search)
    await message.answer('üîé‚ú®', reply_markup=search_kb())
    await show_next_anket(message=message, state=state)


async def show_next_anket(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã"""
    anket_id = await get_anket_from_queue(message.from_user.id, state)
    if anket_id:
        await render_anket(anket_id, message)
        await state.update_data(processing=anket_id)


async def show_self_anket(message: Message, state: FSMContext) -> None:
    """"–†–µ–Ω–¥–µ—Ä –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.set_state(MainStates.edit_anket_or_start)
    await message.answer(text='–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:')
    await render_anket(message.from_user.id, message)
    await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n4. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=main_options_kb())


async def render_anket(anket_id, message: Message, pre_text='', after_text='') -> None:
    """–†–µ–Ω–¥–µ—Ä –∞–Ω–∫–µ—Ç—ã"""
    anket = await get_anket(anket_id)
    media_list = await get_media(anket_id)
    city = f', {anket.city}' if anket.city else ''
    anket_text = f'{pre_text}{anket.name}, {anket.age}{city} - {anket.description}{after_text}'
    if media_list[0].video:
        await message.answer_video(video=media_list[0].file, caption=anket_text)
    else:
        album_builder = MediaGroupBuilder(caption=anket_text)
        for media in media_list:
            album_builder.add_photo(media=media.file)
        album = album_builder.build()
        await message.answer_media_group(media=album, caption=anket_text, )


async def get_anket_from_queue(tg_id: int, state: FSMContext) -> int | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –∏–∑ —Å—Ç–µ–∫–∞"""
    data = await state.get_data()
    queue, offset = data['queue'], data['offset']
    try: # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
        return next(queue)

    except StopIteration: # –µ—Å–ª–∏ —Å—Ç–µ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
        offset += 1 # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ 1

        for i in offset, 0: # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã –≤ –±–¥ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
            ankets = await get_ankets_queue(tg_id, i)
            if ankets:
                await state.update_data(queue=iter(ankets), offset=i)
                data = await state.get_data()
                return next(data['queue'])

        return None # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ


@router.message(Command('start'))
async def start(message: Message, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏–ª–∏ –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    if not await get_anket(message.from_user.id):
        await state.clear()
        await state.set_state(RegistrationSteps.start)
        await message.answer('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –∑–Ω–∞–∫–æ–º—Å—Ç–≤ —à–∏–∑–æ—Ü–µ–ª–æ–≤!', reply_markup=start_bot_kb())
    else:
        await menu(message, state)


@router.message(Command('menu'))
async def menu(message: Message, state: FSMContext) -> None:
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø—Ü–∏–π"""
    if await get_anket(message.from_user.id):
        await state.set_state(MainStates.option_selection)
        await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n4. –î–æ–Ω–∞—Ç –∞–¥–º–∏–Ω—É',
                             reply_markup=main_options_kb())
    else:
        await start(message=message, state=state)


@router.message(F.text == '–Ω–∞—á–∞—Ç—å', StateFilter(RegistrationSteps.start))
async def age_request(message: Message, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if message.from_user.username:
        await state.set_state(RegistrationSteps.age_request)
        await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer(text='–°–¥–µ–ª–∞–π –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')


@router.message(StateFilter(RegistrationSteps.age_request))
async def gender_request(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞"""
    if not message.text.strip().isdigit() or int(message.text) not in range(14, 60):
        await message.answer('<b>–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>')
    else:
        await state.update_data(age=int(message.text.strip()))
        await state.set_state(RegistrationSteps.gender_request)
        await message.answer('–ö–µ–º —Å–µ–±—è –æ—â—É—â–∞–µ—à—å?', reply_markup=gender_selection_kb())


@router.message(F.text.in_(('–∏–Ω—Ü–µ–ª', '—Ñ–µ–º—Ü–µ–ª')), StateFilter(RegistrationSteps.gender_request))
async def interest_request(message: Message, state: FSMContext) -> None:
    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    await state.update_data(gender=message.text == '–∏–Ω—Ü–µ–ª')
    await state.set_state(RegistrationSteps.interest_request)
    await message.answer('–ê –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?', reply_markup=interest_selection_kb())


@router.message(F.text.in_(('—Ñ–µ–º—Ü–µ–ª–æ—á–∫—É', '–∏–Ω—Ü–µ–ª–∞', '–¥–∞ –ø–æ—Ö—É–π')), StateFilter(RegistrationSteps.interest_request))
async def location_request(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞"""
    await state.update_data(interest=('—Ñ–µ–º—Ü–µ–ª–æ—á–∫—É', '–∏–Ω—Ü–µ–ª–∞', '–¥–∞ –ø–æ—Ö—É–π').index(message.text))
    await state.set_state(RegistrationSteps.location_request)
    await message.answer('–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —à–∏–∑–æ–≤ —Ä—è–¥–æ–º', reply_markup=location_request_kb())


@router.message(F.content_type.in_({'text', 'location'}), StateFilter(RegistrationSteps.location_request))
async def name_request(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    city_name = None
    if message.content_type == ContentType.LOCATION:
        msg = await message.answer(text='<i>–ò–¥—ë—Ç –¥–æ–∫—Å–∏–Ω–≥...</i>', reply_markup=ReplyKeyboardRemove())
        latitude, longitude = message.location.latitude, message.location.longitude
        city_name = await get_city_by_cords(latitude, longitude)
        await msg.reply(text='<b>–£—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ç–Ω—É–ª –∞–¥—Ä–µ—Å!</b>') if city_name else await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞.')

    elif message.text != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è©':
        msg = await message.answer(text='<i>–ò–¥—ë—Ç –¥–æ–∫—Å–∏–Ω–≥...</i>', reply_markup=ReplyKeyboardRemove())
        city_name = await get_city_by_name(message.text.strip())
        await msg.reply(text='<b>–ü–æ–ø–æ–ª–Ω–∏–ª –±–∞–∑—ã osint –±–æ—Ç–æ–≤!</b>') if city_name else await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞.')

    await state.update_data(city=city_name)
    await state.set_state(RegistrationSteps.name_request)
    await message.answer(text='–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', reply_markup=ReplyKeyboardRemove())


@router.message(F.text, StateFilter(RegistrationSteps.name_request))
async def description_request(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã"""
    if len(message.text) <= 32:
        await state.update_data(name=message.text.strip())
        await state.set_state(RegistrationSteps.description_request)
        await message.answer(text='–ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, —É –º–µ–Ω—è –∞–∂ –≤—Å—Ç–∞–ª) –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –¥–µ—Ç–∞–ª—è—Ö.')
    else:
        await message.answer(text='–ß—ë—Ç —Å–∏–ª—å–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —É —Ç–µ–±—è –∏–º—è, —è –Ω–µ –∑–∞–ø–æ–º–Ω—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')


@router.message(F.text, StateFilter(RegistrationSteps.description_request))
async def media_request(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –º–µ–¥–∏–∞"""
    if len(message.text) <= 2048:
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ')
        await state.update_data(description=message.text.strip(), media=[])
        await state.set_state(RegistrationSteps.media_confirmation)
    else:
        await message.answer(text='–ê –Ω–µ –¥–æ—Ö—É—è-–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? –î–∞–≤–∞–π –ø–æ–∫–æ—Ä–æ—á–µ –∫–∞–∫-—Ç–æ, –ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')


@router.message(F.content_type.in_({'photo', 'video', 'text'}), StateFilter(RegistrationSteps.media_confirmation))
async def media_confirmation(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞"""
    data = await state.get_data()
    if message.content_type == ContentType.VIDEO and not data.get('media'):
        if not data.get('editing_media'):
            await state.update_data(media=message.video.file_id, video=True)
            await anket_confirmation(message=message, state=state)
        else:
            await add_media(tg_id=message.from_user.id, media=[message.video.file_id], is_video=True)
            await show_self_anket(message=message, state=state)

    elif message.content_type == ContentType.PHOTO:
        data['media'].append(message.photo[-1].file_id)
        if len(data['media']) < 3:
            await message.answer(text=f'–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(data['media'])} –∏–∑ 3. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?', reply_markup=add_photo_confirmation_kb())
        else:
            await state.update_data(video=False)
            await anket_confirmation(message=message, state=state)

    elif message.content_type == ContentType.TEXT:
        if message.text == '—ç—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ':
            if not data.get('editing_media'):
                await state.update_data(video=False)
                await anket_confirmation(message=message, state=state)
            else:
                await add_media(tg_id=message.from_user.id, media=data['media'], is_video=False)
                await show_self_anket(message=message, state=state)


async def anket_confirmation(message: Message, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∫–µ—Ç—ã"""
    data = await state.get_data()
    name_and_age = f'{data['name']}, {data['age']}' # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    main_info = f'{name_and_age}, {data['city']}' if data['city'] else name_and_age
    description, media = data['description'], data['media']
    anket_text = f'{main_info} ‚Äì {description}' 
    await message.answer(text='<i>–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:</i>')
    if not data['video']:
        album_builder = MediaGroupBuilder(caption=anket_text)
        for id in media:
            album_builder.add_photo(media=id)
        album = album_builder.build()
        await message.answer_media_group(media=album, reply_markup=anket_confirmation_kb())
    else:
        await message.answer_video(media=data['media'][0])
    await state.set_state(RegistrationSteps.anket_confirmation)
    await message.answer(text='–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=anket_confirmation_kb())


@router.message(F.text.in_(('–¥–∞', '–∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')), StateFilter(RegistrationSteps.anket_confirmation))
async def anket_saving(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    data = await state.get_data()
    status = message.text == '–¥–∞'
    await add_anket(tg_id=message.from_user.id, name=data['name'], age=data['age'], gender=data['gender'],
                    interest=data['interest'], city=data['city'], description=data['description'], status=status)
    await add_media(tg_id=message.from_user.id, media=data['media'], is_video=data['video'])
    await state.clear()
    
    await state.set_state(MainStates.edit_anket_or_start)
    await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. '
                        '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n4. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.', reply_markup=main_options_kb())
        

@router.message(StateFilter(MainStates.subscription_check))
async def check_subscription(message: Message, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    if message.text == '—è –ø–æ–¥–ø–∏—Å–∞–ª—Å—è':
        member = await bot.get_chat_member(chat_id='@shizocells', user_id=message.from_user.id)
        if member.status == 'left':
            await message.answer(text='–ù—É –≤–æ—Ç –∫–æ–º—É —Ç—ã –ø–∏–∑–¥–∏—à—å? –¢—ã —á–æ, —Ç–∏–ø–∞, —Å–∞–º—ã–π —É–º–Ω—ã–π?')
        else:
            await state.set_state(MainStates.option_selection)
            await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n4. –î–æ–Ω–∞—Ç –∞–¥–º–∏–Ω—É', reply_markup=main_options_kb())


@router.message(F.text.in_(('1üöÄ', '2', '3', '4')), StateFilter(MainStates.edit_anket_or_start))
async def start_search_or_edit_anket(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ —Å—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç"""
    match message.text:
        case '1üöÄ': # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç 
            member = await bot.get_chat_member(chat_id='@shizocells', user_id=message.from_user.id)
            if member.status == 'left':
                await state.set_state(MainStates.subscription_check)
                await message.answer(text='–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ <a href="https://t.me/shizocells">–∫–∞–Ω–∞–ª</a>', reply_markup=subscribe_confirm())
            
            else:
                data = await state.get_data()
                await change_anket_status(message.from_user.id, True)

                if 'queue' in data.keys():
                    await start_search(message=message, state=state)

                else:
                    ankets_queue = await get_ankets_queue(message.from_user.id, 0)

                    if not ankets_queue:
                        await message.answer('–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç')
                        await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n3. '
                                            '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n4. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.',
                                            reply_markup=main_options_kb())
                    else:
                        await state.update_data(queue=iter(ankets_queue), offset=0)
                        await start_search(message=message, state=state)

        case '2': # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –Ω–∞—á–∞–ª–∞
            await age_request(message=message, state=state)

        case '3': # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∞–Ω–∫–µ—Ç—ã
            await state.update_data(editing_media=True)
            await media_request(message=message, state=state)
        
        case '4': # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã
            await state.set_state(MainStates.description_edit)
            await message.answer(text='–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –¥–µ—Ç–∞–ª—è—Ö', reply_markup=back_kb())


@router.message(StateFilter(MainStates.description_edit))
async def anket_description_edit(message: Message, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã"""
    if message.text == '–Ω–∞–∑–∞–¥':
        await show_self_anket(message=message, state=state)
    elif len(message.text) <= 2048:
        await change_anket_description(tg_id=message.from_user.id, text=message.text)
        await show_self_anket(message=message, state=state)
    else:
        await message.answer(text='–ê –Ω–µ –¥–æ—Ö—É—è-–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏? –î–∞–≤–∞–π –ø–æ–∫–æ—Ä–æ—á–µ –∫–∞–∫-—Ç–æ, –ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')


@router.message(F.text.in_(('1üöÄ', '2', '3', '4')), StateFilter(MainStates.option_selection))
async def main_options(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏"""
    match message.text:
        case '1üöÄ': # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç 
            member = await bot.get_chat_member(chat_id='@shizocells', user_id=message.from_user.id)
            if member.status == 'left':
                await state.set_state(MainStates.subscription_check)
                await message.answer(text='–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ <a href="https://t.me/shizocells">–∫–∞–Ω–∞–ª</a>', reply_markup=subscribe_confirm())
            
            else:
                data = await state.get_data()
                await change_anket_status(message.from_user.id, True)

                if 'queue' in data.keys():
                    await start_search(message=message, state=state)
                
                else:
                    ankets_queue = await get_ankets_queue(message.from_user.id, 0)
                    if ankets_queue:
                        await state.update_data(queue=iter(ankets_queue), offset=0)
                        await start_search(message=message, state=state)
                    
                    else:
                        await message.answer('–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç')
                        await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n4. –î–æ–Ω–∞—Ç –∞–¥–º–∏–Ω—É', reply_markup=main_options_kb())

        case'2': # –ø–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await show_self_anket(message=message, state=state)

        case '3': # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
            await state.set_state(MainStates.anket_state_switch)
            await message.answer(text='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É? –¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω–µ –ø–æ—Ö—É–π –Ω–∞ —Ç–µ–±—è.',
                                 reply_markup=turn_anket_off_kb())

        case '4': # –¥–æ–Ω–∞—Ç
            await message.answer(text='–∫–∏–¥–∞–π –±–∞–±–∫–∏ —Å—é–¥–∞: <code>1234567890</code>')


@router.message(F.text.in_(('‚ù§Ô∏è', 'üíå', 'üëé', 'üí§')), StateFilter(MainStates.search))
async def search(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Ü–µ–Ω–∫–∞ –∞–Ω–∫–µ—Ç"""
    match message.text:
        case 'üëé': await show_next_anket(message, state) # –¥–∏–∑–ª–∞–π–∫

        case '‚ù§Ô∏è': # –ª–∞–π–∫
            data = await state.get_data()
            if await check_anket_status(tg_id=data['processing']):
                if not await save_like(message.from_user.id, username=message.from_user.username, anket_id=data['processing']):
                    await bot.send_message(chat_id=data['processing'], text='–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞', reply_markup=likes_watch_kb())
                await show_next_anket(message, state)

        case 'üíå': # —Å–æ–æ–±—â–µ–Ω–∏–µ
            await state.set_state(MainStates.message_request)
            await message.answer('–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=back_kb())

        case 'üí§': # –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
            await state.set_state(MainStates.option_selection)
            await message.answer('–ü–æ–¥–æ–∂–¥—ë–º –ø–æ–∫–∞ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç')
            await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n4. –î–æ–Ω–∞—Ç –∞–¥–º–∏–Ω—É', reply_markup=main_options_kb())


@router.message(F.text == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
async def search(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    likes = await get_likes(message.from_user.id)
    likes_queue = iter(likes)
    try:
        like = next(likes_queue)
        await message.answer(text='üîéüìë', reply_markup=likes_dislike_kb())
        pre_text = '<b>–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞</b>'
        pre_text += f'(–∏ –µ—â—ë {len(likes) - 1})\n\n' if len(likes) > 1 else '\n\n'
        after_text = f'\n\nüíå <b><i>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:</i></b>\n{like.message}' if like.message else ''
        await render_anket(like.sender_id, message, pre_text, after_text)
        await state.update_data(processing=like)
        await state.set_state(MainStates.likes_answer)
        await state.update_data(likes=likes_queue, count=len(likes) - 1)

    except StopIteration:
        await message.answer(text='–£–∂–µ –Ω–µ–∞–∫—É—Ç–∞–ª—å–Ω–æ üòî')
        await menu(message=message, state=state)


@router.message(F.text.in_(('‚ù§Ô∏è', 'üëé')), StateFilter(MainStates.likes_answer))
async def like_answer(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ –ª–∞–π–∫–∏"""
    data = await state.get_data()

    if message.text == '‚ù§Ô∏è':
        anket = await get_anket(tg_id=data['processing'].sender_id)
        await message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è —Å <a href="https://t.me/{data['processing'].sender_username}">{anket.name}</a>.', disable_web_page_preview=True)
        sender_name = await get_name(tg_id=message.from_user.id)
        await bot.send_message(data['processing'].sender_id, text=f'–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è, –Ω–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è —Å <a href="https://t.me/{message.from_user.username}">{sender_name}</a>.', reply_markup=call_menu_kb(), disable_web_page_preview=True)

    await remove_like(data['processing'])

    try:
        like = next(data['likes'])
        pre_text = '<b>–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞</b>'
        pre_text += f'(–∏ –µ—â—ë {data['count'] - 1})\n\n' if data['count'] >= 2 else '\n\n'
        after_text = f'\n\nüíå <b><i>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:\n{like.message}</b></i>' if like.message else ''
        await state.update_data(count=data['count'] - 1, processing=like)
        await render_anket(like.sender_id, message, pre_text, after_text)

    except StopIteration:
        await state.clear()
        await state.set_state(MainStates.option_selection)
        await message.answer('1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n4. –î–æ–Ω–∞—Ç –∞–¥–º–∏–Ω—É', reply_markup=main_options_kb())


@router.message(F.text, StateFilter(MainStates.message_request))
async def message_request(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–º–ø–∞—Ç–∏–∏"""
    data = await state.get_data()

    if message.text == '–Ω–∞–∑–∞–¥':
        await state.set_state(MainStates.search)
        await message.answer(text='üîé‚ú®', reply_markup=search_kb())
        await render_anket(data['processing'], message)

    else:
        if not await save_like(message.from_user.id, message.from_user.username, data['processing'], message.text):
            await bot.send_message(chat_id=data['processing'], text='–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞', reply_markup=likes_watch_kb())
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=search_kb())
        await state.set_state(MainStates.search)
        await show_next_anket(message, state)


@router.message(F.text, StateFilter(MainStates.anket_state_switch))
async def anket_state_switch(message: Message, state: FSMContext) -> None:
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
    match message.text:
        case '–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É üò¥':
            await change_anket_status(message.from_user.id, False)
            await message.answer('–ü—Ä–æ—Ñ–∏—Ç—Ä–æ–ª–∏ –∞–π–∫–æ—Å –¥–∞—Ä–∫ —Ä–µ–π–≤ –≤–ø–∏—Å–∫–∞, —Å–æ–ª–∏ –¥–∞–±–ª –º–∞–º–æ–Ω—Ç - –æ—Ä—É. –û—Ç–∫–ª—é—á–∏–ª –∞–Ω–∫–µ—Ç—É.',
                                reply_markup=turn_anket_on_kb())
            
        case '–≤–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É' | '–Ω–∞–∑–∞–¥':
            await menu(message=message, state=state)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated) -> None:
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–æ—Ç–∞"""
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        event (ChatMemberUpdated): –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    await change_anket_status(tg_id=event.from_user.id, status=False)
